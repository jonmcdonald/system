
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The Converter_pv will be derived from this class.
//*
//* Model Builder version: 4.2.1
//* Generated on: Aug. 12, 2016 01:55:05 PM, (user: kenm)
//*>



#pragma once

#include "model_builder.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 4201 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 4.2.1. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif




#include "generic_protocol.h"
#include "signal_protocol.h"

using namespace ::tlm;

class Converter_pv_base;
class Converter_pv_base_mb_compatibility : public mb::mb_module {
  friend class Converter_pv_base;
 public:
  typedef unsigned int mb_address_type;
 protected:
  Converter_pv_base_mb_compatibility(sc_core::sc_module_name& module_name)
    : mb::mb_module(module_name) {}

  ////////////////////////////////////////
  // functions for target port: Slave
  ////////////////////////////////////////
  protected:
   virtual bool Slave_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
     return true;
   } 
   virtual bool Slave_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     return true;
   } 
   virtual unsigned Slave_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     return 0;
   } 
   virtual unsigned Slave_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     return 0;
   }
   virtual bool Slave_get_direct_memory_ptr(mb_address_type address,
                                                              tlm::tlm_dmi& dmiData) {
     return false;
   } 
};

class Converter_pv_base_parameters {
 public :
  Converter_pv_base_parameters(sc_object* object);
  void print_parameters();

 protected:
  sc_object* m_object;

  sc_core::sc_time clock;
  sc_core::sc_time generic_clock;
  sc_core::sc_time signal_clock;
  double nominal_voltage;
  bool mb_debug;
  bool call_to_default_if;
  bool verbose_parameters;
  bool dmi_enabled;
  const char* warning_level;
  unsigned int Slave_pipeline_length;
  unsigned int Convert_pipeline_length;
  unsigned int convert_delay_in_clocks;
};

class Converter_pv_base : public Converter_pv_base_mb_compatibility,
                           public Converter_pv_base_parameters
{
 private:
  typedef Converter_pv_base_mb_compatibility mb_compatibility_class;
  typedef Converter_pv_base_mb_compatibility BASE_TYPE;
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  typedef Converter_pv_base self;
  SC_HAS_PROCESS(Converter_pv_base);
  Converter_pv_base(sc_core::sc_module_name& module_name);
  virtual void reset_registers();
  virtual void reset_model();
  enum port_enum {Slave_idx = 0,Convert_idx = 1,Bone_idx = 2 };
  
 private:

  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_Slave_fw_process;

 protected:

  virtual void Slave_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    bool status;

    if (mb_debug) {
      std::cout.unsetf(std::ios::showbase);
      bool isWrite = trans.is_write();
      unsigned char* data = trans.get_data_ptr();
      sc_dt::uint64 address = trans.get_address();
      unsigned size = trans.get_data_length();
      std::cout << this->name() << "::Slave_callback_" <<
        (isWrite ? "write" : "read") << ", address = 0x" << std::hex << address;
      if (isWrite) {
        std::cout << ", data = {";
        std::cout << std::hex;
        for (unsigned u=0; u<size; u++) {
          std::cout << "0x" << (unsigned int)(data[u]);
          if (u+1 != size) {
            std::cout << ", ";
          }
        }
        std::cout << std::dec << "}";
      }
      std::cout << ", size = " << std::dec << size << std::endl;
    }
    if (trans.get_byte_enable_ptr() && trans.get_byte_enable_length()) {
      std::stringstream str;
      str << std::showbase << std::hex;
      if (trans.is_write())
        str << "writing to address " << trans.get_address() << " : byte enable pointer defined but not used ";
      else
        str << "reading from address " << trans.get_address() << " : byte enable pointer defined but not used ";
      mb::sysc::complain(str.str().c_str(), this->name());
    }
    payload_for_token = &trans;
    
    if (trans.is_write()) {
      status = Slave_callback_write(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = Slave_callback_read(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      status = false;
    }
    payload_for_token = 0;

    tlm::tlm_response_status trans_status = trans.get_response_status();
    if (trans_status == tlm::TLM_INCOMPLETE_RESPONSE ||
        trans_status == tlm::TLM_OK_RESPONSE)
      trans.set_response_status(status ? TLM_OK_RESPONSE : TLM_GENERIC_ERROR_RESPONSE);
  }

  virtual unsigned Slave_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    
    unsigned status = 0;
    if (trans.is_write()) {
      status = Slave_callback_write_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = Slave_callback_read_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } 

    return status;
  }

  virtual bool Slave_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                      tlm::tlm_dmi& dmiData) {
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND)
      return false;
    payload_on_stack = &trans;
    bool ret_value = Slave_get_direct_memory_ptr(trans.get_address(), dmiData);
    if (ret_value) {
      get_dmi_delay_cb(trans, dmiData, Slave_idx);
    }
    payload_on_stack = 0;
    return ret_value;
  }

  virtual void get_dmi_delay_cb(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmiData, unsigned port_index) {
    sc_time t = sc_core::SC_ZERO_TIME;
    
    getPVTBaseModel()->get_write_delay_for_dmi(port_index, trans, t);
    dmiData.set_write_latency(t);
    t = sc_core::SC_ZERO_TIME;
    getPVTBaseModel()->get_read_delay_for_dmi(port_index, trans, t);
    dmiData.set_read_latency(t);
    
  }

  virtual void invalidate_direct_mem_ptr_callback(unsigned master_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }

  

  
 protected:
  ////////////////////////////////////////
  // registers write callbacks interface
  ////////////////////////////////////////
  
  virtual void cb_write_STAT_CFG_CNV(unsigned int newValue) = 0;



  

  
 protected:
  virtual void cb_transport_dbg_STAT_CFG_CNV(tlm::tlm_generic_payload& trans) {}
  
  

 public:




  tlm::tlm_generic_payload* payload_on_stack;
  tlm::tlm_generic_payload* payload_for_token;



  ////////////////////////////////////////
  // functions for target port: Slave
  ////////////////////////////////////////
  protected:
  virtual bool Slave_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
    mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->Slave_callback_read(mb_compatibility_class::mb_address_type(local_address),
                                                        data,
                                                        size);
   }
   virtual bool Slave_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->Slave_callback_write(mb_compatibility_class::mb_address_type(local_address),
                                                         data,
                                                         size);
   }

   virtual unsigned Slave_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     mb_compatibility_class *This = this;
     return This->Slave_callback_read_dbg(mb_compatibility_class::mb_address_type(address),
                                                            data,
                                                            size);
   }
   virtual unsigned Slave_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     mb_compatibility_class *This = this;
     return This->Slave_callback_write_dbg(mb_compatibility_class::mb_address_type(address),
                                                             data,
                                                             size);
   }
   virtual bool Slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
     mb_compatibility_class *This = this;
     return This->Slave_get_direct_memory_ptr(mb_compatibility_class::mb_address_type(address), dmiData);
   } 

  
 protected: 
  virtual void Convert_callback() {
  }
  virtual void cb_signal_Convert(bool value) {
    Convert_callback();
  } 
  
  
 

 public:
  typedef tlm::tlm_base_protocol_types Slave_protocol_types;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type Slave_payload_type;

 public:
  // port declarations 

  tlm::tlm_target_socket <32, tlm::tlm_base_protocol_types>  Slave;
  sc_core::sc_out<bool> Bone;  
  mb::tlm20::signal_in<bool> Convert; 

 
  
  
 protected:
  void end_of_elaboration();
  

 public:
  mb::mb_token_ptr get_current_token() {
    mb::mb_token_ptr token_ptr = mb_module::get_current_token();
    if (token_ptr)
      return token_ptr;
    if (payload_for_token) {
      mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*payload_for_token);
      if (extension) {
        mb_module::set_current_token(extension->getToken());
        return extension->getToken();
      }
    }
    return 0;
  }
  
 protected:
  mb::mb_memory<tlm::tlm_base_protocol_types> Slave_memory;
  

 protected:
  mb::mb_register<unsigned int> DATA;
  mb::mb_register<unsigned int> OFFSET;
  mb::mb_register<unsigned int> STATCFG_CNVEN;
  mb::mb_register<unsigned int> STATCFG_DONEN;
  mb::mb_register<unsigned int> STAT_CFG_CNV;
  mb::mb_register<unsigned int> CONVERTING;
};



#include "model_builder.h"

template <typename TRANS = tlm::tlm_generic_payload>
class Converter_RemoteRegisters {

public:
  typedef tlm::tlm_blocking_transport_if<TRANS> forward_if;

public:
  template <class SOCKET>
  Converter_RemoteRegisters(SOCKET& s, uint64_t baseAddress) :
    m_DATA(s[0], baseAddress, ((0x0000) / 4), ( (0) + (((0x0000) % 4) << 3)), ( (15) + (((0x0000) % 4) << 3))),
    m_OFFSET(s[0], baseAddress, ((0x0004) / 4), ( (0) + (((0x0004) % 4) << 3)), ( (15) + (((0x0004) % 4) << 3))),
    m_STATCFG_CNVEN(s[0], baseAddress, ((0x0008) / 4), ( (0) + (((0x0008) % 4) << 3)), ( (0) + (((0x0008) % 4) << 3))),
    m_STATCFG_DONEN(s[0], baseAddress, ((0x0008) / 4), ( (1) + (((0x0008) % 4) << 3)), ( (1) + (((0x0008) % 4) << 3))),
    m_STAT_CFG_CNV(s[0], baseAddress, ((0x0008) / 4), ( (2) + (((0x0008) % 4) << 3)), ( (2) + (((0x0008) % 4) << 3))),
    m_CONVERTING(s[0], baseAddress, ((0x0008) / 4), ( (3) + (((0x0008) % 4) << 3)), ( (3) + (((0x0008) % 4) << 3))),
    m_dummy(0) {}
    
public:
  mb::mb_remote_register<unsigned int, TRANS> m_DATA;
  mb::mb_remote_register<unsigned int, TRANS> m_OFFSET;
  mb::mb_remote_register<unsigned int, TRANS> m_STATCFG_CNVEN;
  mb::mb_remote_register<unsigned int, TRANS> m_STATCFG_DONEN;
  mb::mb_remote_register<unsigned int, TRANS> m_STAT_CFG_CNV;
  mb::mb_remote_register<unsigned int, TRANS> m_CONVERTING;
private:
  int m_dummy;
};

/* for backware compatibility */
template <typename TRANS = tlm::tlm_generic_payload>
class Converter_pv_RemoteRegisters : public Converter_RemoteRegisters<TRANS> {
public:
  template <class SOCKET>
  Converter_pv_RemoteRegisters(SOCKET& s, uint64_t baseAddress)
    : Converter_RemoteRegisters<TRANS>(s, baseAddress) {
  }
};



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The Converter_t will be derived from this class.
//*
//* Model Builder version: 4.2.1
//* Generated on: Aug. 12, 2016 01:55:05 PM, (user: kenm)
//*>


#pragma once

#include "model_builder.h"
#include "generic_protocol.h"

#include "signal_protocol.h"
 

class Converter_t_base : public papoulis::SystemCBaseModel {
public:
  static Converter_t_base* create_t(const char* _name, long simulation);
public:
  Converter_t_base(sc_core::sc_module_name& module_name, long simulation);
 
  enum port_enum {Slave = 0, Convert = 1, Bone = 2};

protected:
  // The following callbacks are called whenever there is a transaction start or end in the port

  virtual void accept_generic_READ
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 rDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};
  virtual void end_generic_READ
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 rDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};

  virtual void accept_generic_WRITE
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 wDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};
  virtual void end_generic_WRITE
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 wDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};

  virtual void accept_signal_WRITE
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64 address,
     sc_dt::uint64 value_p,
     sc_dt::uint64 block_size) {};
  virtual void end_signal_WRITE
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64 address,
     sc_dt::uint64 value_p,
     sc_dt::uint64 block_size) {};


public:
  virtual bool portHasRegisters(unsigned portIndex);
  virtual bool triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans);

  virtual const char* get_library_name() {return "models";}
  virtual const char* get_model_vendor() {return "Mentor.com";}
  virtual const char* get_model_version() {return "1.0";}

  virtual unsigned getPortCountForRegister(unsigned regIndex);
  virtual void getPortNamesForRegister(unsigned regIndex, const char **names);
protected:
  /* schedule functions */
  void schedule_signal_WRITE
    (long port_index,
     sc_dt::uint64 delay,
     long& burst_size,
     esl::include::transaction_power& power , long address, long* value_p, long block_size);
public:
  /* called when "params.m_phase" is sent through the "port_index" port */
  virtual void sent_phase_cb(unsigned port_index,
                             esl::sc_sim::mb_cb_params& params) {
    
  }
                             
  /* called when "params.m_phase" is received by the "port_index" port */
  virtual void received_phase_cb(unsigned port_index,
                                 esl::sc_sim::mb_cb_params& params) {
    
  }

protected:
  friend class Converter_model;
  
protected:
  // parameters
  sc_core::sc_time clock;
  sc_core::sc_time generic_clock;
  sc_core::sc_time signal_clock;
  double nominal_voltage;
  bool mb_debug;
  bool call_to_default_if;
  bool verbose_parameters;
  bool dmi_enabled;
  const char* warning_level;
  unsigned int Slave_pipeline_length;
  unsigned int Convert_pipeline_length;
  unsigned int convert_delay_in_clocks;

protected:
  long m_simulation;

 
  
public:
  enum register_enum {DATA_idx, OFFSET_idx, STATCFG_CNVEN_idx, STATCFG_DONEN_idx, STAT_CFG_CNV_idx, CONVERTING_idx };
protected:
  mb::mb_t_register<unsigned int> DATA;
  mb::mb_t_register<unsigned int> OFFSET;
  mb::mb_t_register<unsigned int> STATCFG_CNVEN;
  mb::mb_t_register<unsigned int> STATCFG_DONEN;
  mb::mb_t_register<unsigned int> STAT_CFG_CNV;
  mb::mb_t_register<unsigned int> CONVERTING; 
  
  

  static const unsigned port_count = 3;
  papoulis::SystemCBaseModel::PortDescription port_descriptions[port_count];
  
  

protected:
  std::vector<esl::sc_sim::pipeline_policy*> m_pipeline_vector;
  std::vector<esl::sc_sim::sequential_policy*> m_sequential_vector;
  std::vector<esl::sc_sim::delay_policy*> m_delay_vector;
  std::vector<esl::sc_sim::uniform_bus_policy*> m_bus_vector;
  std::vector<esl::sc_sim::power_policy*> m_power_vector;
  std::vector<esl::sc_sim::state_power_policy*> m_state_power_vector;
public:
  virtual void update_sync_all();
  virtual void update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle);
  virtual void update_sequential_parameters(esl::sc_sim::sequential_policy* handle);
  virtual void update_delay_parameters(esl::sc_sim::delay_policy* handle);
  virtual void update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle);
  virtual void update_power_parameters(esl::sc_sim::power_policy* handle);
  virtual void update_global_power_parameters(esl::sc_sim::constant_global_power_policy* handle);
  virtual void update_state_power_parameters(esl::sc_sim::state_power_policy* handle);
protected: /* InterfaceFunctions */
  virtual TransactionCallbackFunctionPointer getTransactionCallback(unsigned callbackIndex);
  config::real80 get_state_power();
protected:

  void start_transaction_generic_READ
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void end_transaction_generic_READ
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void start_transaction_generic_WRITE
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void end_transaction_generic_WRITE
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void start_transaction_signal_WRITE
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void end_transaction_signal_WRITE
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
};

/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for Converter.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 4.2.1
//* Generated on: Aug. 12, 2016 01:55:05 PM, (user: kenm)
//*>


#pragma once

#include "model_builder.h"



 


// forward declaration for pv class
class Converter_pv;



using namespace std;

class Converter_pvt_param_defaults {
  
public:
  Converter_pvt_param_defaults(const char* hier_name) {

    sc_core::sc_time clock;
    sc_core::sc_time generic_clock;
    sc_core::sc_time signal_clock;
    double nominal_voltage;
    bool mb_debug;
    bool call_to_default_if;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    unsigned int Slave_pipeline_length;
    unsigned int Convert_pipeline_length;
    unsigned int convert_delay_in_clocks;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name);
    generic_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("generic_clock", clock, hier_name);
    signal_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("signal_clock", clock, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name);
    mb_debug = ::mb::sysc::sdInitParameter<bool>("mb_debug", false, hier_name);
    call_to_default_if = ::mb::sysc::sdInitParameter<bool>("call_to_default_if", false, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name);
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", true, hier_name);
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", "WARNING", hier_name);
    Slave_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("Slave_pipeline_length", 2, hier_name);
    Convert_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("Convert_pipeline_length", 2, hier_name);
    convert_delay_in_clocks = ::mb::sysc::sdInitParameter<unsigned int>("convert_delay_in_clocks", 10, hier_name);
    ::mb::sysc::sdPropagateParameters();
  }

  Converter_pvt_param_defaults(const char* hier_name, sc_core::sc_time clock_init, sc_core::sc_time generic_clock_init, sc_core::sc_time signal_clock_init, double nominal_voltage_init, bool mb_debug_init, bool call_to_default_if_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, unsigned int Slave_pipeline_length_init, unsigned int Convert_pipeline_length_init, unsigned int convert_delay_in_clocks_init) {

    sc_core::sc_time clock;
    sc_core::sc_time generic_clock;
    sc_core::sc_time signal_clock;
    double nominal_voltage;
    bool mb_debug;
    bool call_to_default_if;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    unsigned int Slave_pipeline_length;
    unsigned int Convert_pipeline_length;
    unsigned int convert_delay_in_clocks;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", clock_init, hier_name);
    generic_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("generic_clock", generic_clock_init, hier_name);
    signal_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("signal_clock", signal_clock_init, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", nominal_voltage_init, hier_name);
    mb_debug = ::mb::sysc::sdInitParameter<bool>("mb_debug", mb_debug_init, hier_name);
    call_to_default_if = ::mb::sysc::sdInitParameter<bool>("call_to_default_if", call_to_default_if_init, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", verbose_parameters_init, hier_name);
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", dmi_enabled_init, hier_name);
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", warning_level_init, hier_name);
    Slave_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("Slave_pipeline_length", Slave_pipeline_length_init, hier_name);
    Convert_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("Convert_pipeline_length", Convert_pipeline_length_init, hier_name);
    convert_delay_in_clocks = ::mb::sysc::sdInitParameter<unsigned int>("convert_delay_in_clocks", convert_delay_in_clocks_init, hier_name);

    ::mb::sysc::sdPropagateParameters();
    }

  Converter_pvt_param_defaults(const char* hier_name, std::vector<std::pair<char*, unsigned int> > &change_parameters){

    sc_core::sc_time clock;
    sc_core::sc_time generic_clock;
    sc_core::sc_time signal_clock;
    double nominal_voltage;
    bool mb_debug;
    bool call_to_default_if;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    unsigned int Slave_pipeline_length;
    unsigned int Convert_pipeline_length;
    unsigned int convert_delay_in_clocks;
    for (unsigned i =0; i<change_parameters.size(); i++){
      ::mb::sysc::sdInitParameter<unsigned int>(change_parameters[i].first, change_parameters[i].second, hier_name);
    }

    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name);
    generic_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("generic_clock", clock, hier_name);
    signal_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("signal_clock", clock, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name);
    mb_debug = ::mb::sysc::sdInitParameter<bool>("mb_debug", false, hier_name);
    call_to_default_if = ::mb::sysc::sdInitParameter<bool>("call_to_default_if", false, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name);
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", true, hier_name);
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", "WARNING", hier_name);
    Slave_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("Slave_pipeline_length", 2, hier_name);
    Convert_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("Convert_pipeline_length", 2, hier_name);
    convert_delay_in_clocks = ::mb::sysc::sdInitParameter<unsigned int>("convert_delay_in_clocks", 10, hier_name);  

    ::mb::sysc::sdPropagateParameters();
  }
  
  //void set_clock (

};

class Converter_pvt : public esl::sc_sim::PVTBaseModel, 
                          public mb::utl::cb_owner,
                          private Converter_pvt_param_defaults {

 public:
  typedef Converter_pvt self_type;

 public: 
  // Constructor
  Converter_pvt(sc_core::sc_module_name module_name); 
  Converter_pvt(sc_core::sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time generic_clock_init, sc_core::sc_time signal_clock_init, double nominal_voltage_init, bool mb_debug_init, bool call_to_default_if_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, unsigned int Slave_pipeline_length_init, unsigned int Convert_pipeline_length_init, unsigned int convert_delay_in_clocks_init); 
  Converter_pvt(sc_core::sc_module_name module_name, std::vector<std::pair<char*, unsigned int> > &change_parameters);
  ~Converter_pvt(); 

 
 public:
    //access the T instance
  inline Converter_t_base* getT() const {
    return m_Converter_t;
  }
  
  //access the PV instance
  inline Converter_pv* getPV() const {
    return m_Converter_pv;
  }

  virtual const SystemCBaseModel* getSystemCBaseModel() const {
    return getT();
  }
  virtual SystemCBaseModel* getSystemCBaseModel() {
    return getT();
  }
  

 private:
  void bind();
  

  void b_transport_inside_Convert(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  void b_transport_outside_Bone(bool data); 

 private:
  
  //T instance
  Converter_t_base* m_Converter_t;
  
  //PV instance
  Converter_pv* m_Converter_pv;

 public:
  // External ports

  typedef esl::sc_sim::pvt_target_socket<32, tlm::tlm_base_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> Slave_type;
  Slave_type Slave;
  esl::sc_sim::pvt_initiator_socket<1, tlm::tlm_base_protocol_types, 1, sc_core::SC_ZERO_OR_MORE_BOUND>  Bone;
  esl::sc_sim::pvt_target_socket<1, tlm::tlm_base_protocol_types, 1, sc_core::SC_ZERO_OR_MORE_BOUND>  Convert;

 private:
  // PV connection ports

  typedef mb::tlm20::initiator_socket_cb<32> Slave_entry_type;
  Slave_entry_type Slave_entry;    
  sc_core::sc_out<bool> Convert_entry; 
  esl::sc_sim::signal_out<bool> Bone_entry;  

 private:

  struct Bone_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    Converter_pvt& m_owner;
    
    Bone_nb_connector(Converter_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.Bone.nb_transport_fw((tlm::tlm_base_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.Bone;
    }
  };
  friend struct Bone_nb_connector;
  Bone_nb_connector m_Bone_nb_connector;



  struct Slave_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    Converter_pvt& m_owner;
    
    Slave_nb_connector(Converter_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.Slave.nb_transport_bw((tlm::tlm_base_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.Slave;
    }
  };
  friend struct Slave_nb_connector;
  Slave_nb_connector m_Slave_nb_connector;

  struct Convert_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    Converter_pvt& m_owner;
    
    Convert_nb_connector(Converter_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.Convert.nb_transport_bw((tlm::tlm_base_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.Convert;
    }
  };
  friend struct Convert_nb_connector;
  Convert_nb_connector m_Convert_nb_connector;

  

  tlm::tlm_sync_enum receive_nb_transport_Bone(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(2, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_Slave(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(0, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_Convert(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(1, trans, phase, t);
  }

};



