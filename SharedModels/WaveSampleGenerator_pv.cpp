
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for WaveSampleGenerator.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Aug. 15, 2016 03:29:23 PM, (user: kenm)
//* Automatically merged on: Aug. 15, 2016 06:02:58 PM, (user: kenm)
//*>



#include "WaveSampleGenerator_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
WaveSampleGenerator_pv::WaveSampleGenerator_pv(sc_module_name module_name) 
  : WaveSampleGenerator_pv_base(module_name) {
}      

// Read callback for Slave port.
// Returns true when successful.
bool WaveSampleGenerator_pv::Slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  double period = Period.to_double();
  mb_sync();
  double current_time = sc_time_stamp().to_double();
  double ratio = current_time / period;
  double fractional = ratio - floor(ratio);
  double degrees_in_radions = fractional * 2 * M_PI;
  double sin_of_ratio = (sin(degrees_in_radions) + 1.0) / 2;
  double signal = sin_of_ratio * (double)((Max - Min) + Min);
  if (signal < 0) {
    signal = 0;
  }
  unsigned short value = (unsigned short)floor(signal);
  memcpy(data, (unsigned char *)&value, 2);
  Waveform = (unsigned int)floor(signal);
  return true;
}

// Write callback for Slave port.
// Returns true when successful.
bool WaveSampleGenerator_pv::Slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned WaveSampleGenerator_pv::Slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned WaveSampleGenerator_pv::Slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool WaveSampleGenerator_pv::Slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

// in order to minimize merging conflicts, we recommend to add your functions after this comment
