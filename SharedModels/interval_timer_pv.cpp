
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for interval_timer.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Aug. 12, 2016 10:23:41 AM, (user: kenm)
//* Automatically merged on: Aug. 12, 2016 11:36:58 AM, (user: kenm)
//* Automatically merged on: Aug. 12, 2016 12:58:34 PM, (user: kenm)
//* Automatically merged on: Aug. 12, 2016 01:00:27 PM, (user: kenm)
//*>



#include "interval_timer_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
interval_timer_pv::interval_timer_pv(sc_module_name module_name) 
  : interval_timer_pv_base(module_name) {
  StartTime = sc_time_stamp();
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for CURRENTCOUNT register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int interval_timer_pv::cb_read_CURRENTCOUNT() {
  if (STATCTRL__ENCOUNT > 0) {
    mb_sync();
    double num_clocks = (sc_time_stamp() - StartTime) / clock;
    return (unsigned int) num_clocks;
  }
  
  return 0;
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for STATCTRL__ENCOUNT register.
// The newValue has been already assigned to the STATCTRL__ENCOUNT register.
void interval_timer_pv::cb_write_STATCTRL__ENCOUNT(unsigned int newValue) {
  if (newValue > 0) {
    if (INTERVALCOUNT > 0) {
      IntervalEvent.cancel();
      mb_sync();
      StartTime = sc_time_stamp();
      IntervalEvent.notify(INTERVALCOUNT * clock);
      STATCTRL__RUNNING = 1;
    } else {
      STATCTRL__ENCOUNT = 0;
      STATCTRL__RUNNING = 0;
      Interval.write(0);
    }
  } else {
    IntervalEvent.cancel();
    STATCTRL__RUNNING = 0;
    Interval.write(0);
  }
}
    

// Read callback for Slave port.
// Returns true when successful.
bool interval_timer_pv::Slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for Slave port.
// Returns true when successful.
bool interval_timer_pv::Slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned interval_timer_pv::Slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned interval_timer_pv::Slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool interval_timer_pv::Slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void interval_timer_pv::cb_transport_dbg_CURRENTCOUNT(tlm::tlm_generic_payload& trans) {}
void interval_timer_pv::cb_transport_dbg_STATCTRL__ENCOUNT(tlm::tlm_generic_payload& trans) {}

// callback for any change in signal: Reset of type: sc_in<bool>
void interval_timer_pv::Reset_callback() {

}

// in order to minimize merging conflicts, we recommend to add your functions after this comment

void interval_timer_pv::IntervalThread() {
  while(true) {
    wait(IntervalEvent);
    Interval.write(1);
    wait(clock);
    Interval.write(0);
    mb_sync();
    StartTime = sc_time_stamp();
    IntervalEvent.notify(INTERVALCOUNT * clock);
    STATCTRL__RUNNING = 1;    
  }
}
