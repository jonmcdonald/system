
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for node.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.0
//* Generated on: Aug. 12, 2016 09:42:51 AM, (user: jon)
//*>



#include "node_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
node_pv::node_pv(sc_module_name module_name) 
  : node_pv_base(module_name) {
    SC_THREAD(thread);
}      

// Read callback for s port.
// Returns true when successful.
bool node_pv::s_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for s port.
// Returns true when successful.
bool node_pv::s_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  int *id = (int *) data;
  cout << sc_time_stamp() <<": "<<name()<<": addr = "<<address<<", id = "<<*id<<endl;
  return true;
} 




unsigned node_pv::s_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned node_pv::s_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool node_pv::s_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

// in order to minimize merging conflicts, we recommend to add your functions after this comment

int node_pv::ID = 1;

void node_pv::thread() {

  unsigned long long addr;
  unsigned int delay;

  for (int i=0;i<1;i++) {
    addr = rand();
    delay = rand()%100;
    wait (delay * clock);
    y_write(addr, ID++);
  }
}
