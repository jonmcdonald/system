
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for NetworkSwitchLevel1.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Aug. 15, 2016 12:15:23 PM, (user: kenm)
//* Automatically merged on: Aug. 15, 2016 10:47:09 PM, (user: kenm)
//* Automatically merged on: Aug. 15, 2016 10:47:54 PM, (user: kenm)
//*>


#pragma once

#include "NetworkSwitchLevel1_model.h"

using namespace tlm;

//This class inherits from the NetworkSwitchLevel1_pv_base class
class NetworkSwitchLevel1_pv : public NetworkSwitchLevel1_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(NetworkSwitchLevel1_pv);
  NetworkSwitchLevel1_pv(sc_core::sc_module_name module_name);    

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool NodeSlave0_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave1_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave1_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave2_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave2_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave3_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave3_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave4_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave4_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool NodeSlave0_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave1_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave1_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave2_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave2_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave3_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave3_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool NodeSlave4_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned NodeSlave4_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool NodeSlave0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool NodeSlave1_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool NodeSlave2_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool NodeSlave3_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool NodeSlave4_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   
  
  ////////////////////////////////////////
  // User Code
  ////////////////////////////////////////
  bool send_packet(unsigned long master_port_index, mb_address_type address, unsigned char * data, unsigned int size);
  void NodeThread0();
  void NodeThread1();
  void NodeThread2();
  void NodeThread3();
  void NodeThread4();

  std::map<unsigned long, unsigned long> MacAddressMap;
};

